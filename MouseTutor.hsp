#include "hspext.as"
#uselib "user32.dll"

#func keybd_event "keybd_event" int,int,int
#func mouse_event "mouse_event" int,int,int
#func SetWindowLongA "SetWindowLongA" int,int,int
#func SetLayeredWindowAttributes "SetLayeredWindowAttributes" int,int,int,int
#func BlockInput "BlockInput" int
#func GetDoubleClickTime "GetDoubleClickTime"

//XYテーブル
XYTABLE_WIDTH=230
XYTABLE_HEIGHT=280
XYTABLE_FREQUENCY=100//FREQUENCY=XYテーブルの座標を更新する間隔(XYTABLE_FREQENCY=40だったら40ミリ秒に1回)
XYTABLE_MAG=42//XYテーブルをどの程度縮小するか42が1倍

//COMの番号を指定する
COM_NUM=10
COM_RATE=57600
comopen COM_NUM,"baud="+COM_RATE
if(stat==1){
	//dialog "Failed to connect to xy-table."
}else{
	await 1000
	initXYTable
	await 10000
	moveXYTable 0,0,5000//0,0座標が真ん中になるように設定する！！
	await 5000
}

*init
	
	bgscr 0,ginfo(20),ginfo(21),,0,0
	
	SetWindowLongA hwnd,-20,$00080000|$00000020
	SetLayeredWindowAttributes hwnd,0,1,1//黒色を透明にする
	cls 4
	
	
	mouse_left_pushed=0
	mouse_right_pushed=0
	
	dim record
	position=0//recordの行数を保持する
	WAIT_TIME=10
	
	//ダブルクリック間隔の時間を取得
	GetDoubleClickTime
	DOUBLE_CLICK_TIME=stat
	
	//playで使用する定数
	CIRCLE_RADIUS=30
	FONT_SIZE=30
		
	bgscr 1,100,90,,0,810
	gsel 1,2
	width 100,90
	objsize 100,30
	button "REC",*rec//デモのときはいらない
	objsize 100,30
	button "PLAY",*play
	objsize 100,30
	button "FINISH",*finish
	
	stop



*rec
	gsel 1,-1
	
	//全てのキーを離した状態にする(念のため)
	repeat 119
		keybd_event cnt+3,,2
	loop
	
	repeat
		//終了判定
		getkey key_ctrl,17
		getkey key_r,82
		if(key_ctrl==1 && key_r==1){
			goto *rec_finish
		}
		
		pushed_key=0//押されているキー番号を格納する
		repeat 119
			getkey key,cnt+3
			if(key=1){
				pushed_key=cnt+3
				break
			}
		loop
	
		record(position)="<Event>"+"<Msg>"+"MOVE"+"</Msg>"+"<X>"+str(ginfo(0))+"</X>"+"<Y>"+str(ginfo(1))+"</Y>"+"<Key>"+pushed_key+"</Key>"+"</Event>"
		
		getkey mouse_left,1
		//L_DOWN
		if(mouse_left=1 && mouse_left_pushed=0){
			mouse_left_pushed=1
			record(position)="<Event>"+"<Msg>"+"L_DOWN"+"</Msg>"+"<X>"+str(ginfo(0))+"</X>"+"<Y>"+str(ginfo(1))+"</Y>"+"<Key>"+pushed_key+"</Key>"+"</Event>"
		}
		//L_UP
		if(mouse_left=0 && mouse_left_pushed=1){
			mouse_left_pushed=0
			record(position)="<Event>"+"<Msg>"+"L_UP"+"</Msg>"+"<X>"+str(ginfo(0))+"</X>"+"<Y>"+str(ginfo(1))+"</Y>"+"<Key>"+pushed_key+"</Key>"+"</Event>"
		}
		
		getkey mouse_right,2
		//R_DOWN
		if(mouse_right=1 && mouse_right_pushed=0){
			mouse_right_pushed=1
			record(position)="<Event>"+"<Msg>"+"R_DOWN"+"</Msg>"+"<X>"+str(ginfo(0))+"</X>"+"<Y>"+str(ginfo(1))+"</Y>"+"<Key>"+pushed_key+"</Key>"+"</Event>"
		}
		//R_UP
		if(mouse_right=0 && mouse_right_pushed=1){
			mouse_right_pushed=0
			record(position)="<Event>"+"<Msg>"+"R_UP"+"</Msg>"+"<X>"+str(ginfo(0))+"</X>"+"<Y>"+str(ginfo(1))+"</Y>"+"<Key>"+pushed_key+"</Key>"+"</Event>"
		}
		
		position++
		
		await WAIT_TIME
	loop
	
	stop
	
	
	
	
	
*rec_finish
	//recordに保存
	notesel buf
	buf=""
	repeat length(record)
		noteadd str(record(cnt))
	loop
	notesave "record.xml"
	
	goto *init
	
	stop





*play
	gsel 1,-1
	
	bgscr 2,ginfo(20),ginfo(21),,0,0
	SetWindowLongA hwnd,-20,$00080000|$00000020
	SetLayeredWindowAttributes hwnd,0,150,3//全体的に半透明、黒色は透明になるっぽい
	cls 0
	gsel 2,-1//一旦2番ウィンドウ非表示
	
	double_click_judge_time=0//ダブルクリックの判定時間を格納する
	
	//recordファイルを読み込む
	notesel buf
	buf=""
	noteload "record.xml"
	repeat noteinfo(0)
		noteget record(cnt),cnt
	loop
	
	//インプットをブロックする
	BlockInput 1
	
	//最初の場所にXYステージを持っていく
	initial_x=getX(record(0))
	initial_y=getY(record(0))
	moveXYTable initial_x/XYTABLE_MAG,initial_y/XYTABLE_MAG,10000
	await 3000
	
	prev_key=0//前回のループで押されたキー番号を格納する
	
	repeat length(record)
		current_msg=getMsg(record(position))
		current_x=getX(record(position))
		current_y=getY(record(position))
		current_key=getCurrentKey(record(position))
		if(position>0){
			prev_x=getX(record(position-1))
			prev_y=getY(record(position-1))
		}
	
		BlockInput 1
		
		if(cnt\(XYTABLE_FREQUENCY/WAIT_TIME)=0 && cnt>XYTABLE_FREQUENCY/WAIT_TIME){
			p_x=getX(record(position-(XYTABLE_FREQUENCY/WAIT_TIME)))
			p_y=getY(record(position-(XYTABLE_FREQUENCY/WAIT_TIME)))
			dist_x=current_x-p_x
			dist_y=current_y-p_y
			dist=sqrt(dist_x*dist_x+dist_y*dist_y)
			f_val=dist/XYTABLE_MAG*800
			moveXYTable current_x/XYTABLE_MAG,current_y/XYTABLE_MAG,f_val
		}
	
		switch current_msg
			case "MOVE"
				gsel 2,-1//2番ウィンドウ非表示
				mouse current_x,current_y
				if(mouse_left_pushed=1){
					drawRedLine current_x,current_y,prev_x,prev_y
				}else:if(mouse_right_pushed=1){
					drawBlueLine current_x,current_y,prev_x,prev_y
				}else{
					gsel 0,1
					cls 4//ウィンドウ0を綺麗にする
				}
			swbreak
	
			case "L_DOWN"
				BlockInput 0
				drawTransparentCircle current_x,current_y
				drawRedCircle current_x,current_y
				//ダブルクリックだったかどうかを、先100個のログを調べて検出
				is_double_left_click=0
				for i,1,DOUBLE_CLICK_TIME/WAIT_TIME,1
					if(getMsg(record(position+i))="L_DOWN" && getX(record(position))=getX(record(position+i)) && getY(record(position))=getY(record(position+i))){
						is_double_left_click=i//その箇所を記録する
					}
				next
				//ドラッグだったかどうかを検出
				is_left_drag=0
				repeat length(record)
					if(getMsg(record(position+cnt+1))="L_UP"){
						break
					}
					if(current_x!=getX(record(position+cnt+1)) || current_y!=getY(record(position+cnt+1))){
						is_left_drag=1
						break
					}
				loop
				//シングルクリックの場合
				if(is_double_left_click=0 && is_left_drag=0){
					echoLeftClick current_x,current_y
					repeat 
						mouse current_x,current_y
						getkey mouse_left,1
						if(mouse_left=1){
							mouse_left_pushed=1
							break
						}
	
						getkey key_ctrl,17
						getkey key_r,82
						if(key_ctrl==1 && key_r==1){
							gsel 2,-1
							mouse_event $4,0,0
							mouse_event $10,0,0
							goto *init
						}
						
						await WAIT_TIME
					loop
				}
				//ドラッグの場合
				if(is_left_drag=1){
					echoLeftDrag current_x,current_y
					repeat 
						mouse current_x,current_y
						getkey mouse_left,1
						if(mouse_left=1){
							mouse_left_pushed=1
							break
						}
	
						getkey key_ctrl,17
						getkey key_r,82
						if(key_ctrl==1 && key_r==1){
							gsel 2,-1
							mouse_event $4,0,0
							mouse_event $10,0,0
							goto *init
						}
						
						await WAIT_TIME
					loop
				}
				//ダブルクリックの場合
				if(is_double_left_click>0){
					echoLeftDoubleClick current_x,current_y
					repeat
						mouse current_x,current_y
					    getkey mouse_left,1
					    if(mouse_left=0 && mouse_left_pushed=1){
							mouse_left_pushed=0
						}
					 	if(double_click_judge_time=0){
						 	if(mouse_left=1 && mouse_left_pushed=0){
								mouse_left_pushed=1
								double_click_judge_time=DOUBLE_CLICK_TIME
							}
						}
						if(double_click_judge_time>0){
							double_click_judge_time-=WAIT_TIME
							if(mouse_left=1 && mouse_left_pushed=0){
								mouse_left_pushed=1
								double_click_judge_time=0
								break
							}
						}
	
						getkey key_ctrl,17
						getkey key_r,82
						if(key_ctrl==1 && key_r==1){
							gsel 2,-1
							mouse_event $4,0,0
							mouse_event $10,0,0
							goto *init
						}
						
					    await WAIT_TIME
					loop
					position+=is_double_left_click
				}
			swbreak
	
			case "L_UP"
				mouse current_x,current_y
				mouse_event $4,0,0
				mouse_left_pushed=0
			swbreak
	
			case "R_DOWN"
				BlockInput 0
				drawTransparentCircle current_x,current_y
				drawBlueCircle current_x,current_y
				//ダブルクリックだったかどうかを、先100個のログを調べて検出
				is_double_right_click=0
				for i,1,DOUBLE_CLICK_TIME/WAIT_TIME,1
					if(getMsg(record(position+i))="R_DOWN" && getX(record(position))=getX(record(position+i)) && getY(record(position))=getY(record(position+i))){
						is_double_right_click=i//その箇所を記録する
					}
				next
				//ドラッグだったかどうかを検出
				is_right_drag=0
				repeat length(record)
					if(getMsg(record(position+cnt+1))="R_UP"){
						break
					}
					if(current_x!=getX(record(position+cnt+1)) || current_y!=getY(record(position+cnt+1))){
						is_right_drag=1
						break
					}
				loop
				//シングルクリックの場合
				if(is_double_right_click=0 && is_right_drag=0){
					echoRightClick current_x,current_y
					repeat 
						mouse current_x,current_y
						getkey mouse_right,2
						if(mouse_right=1){
							mouse_right_pushed=1
							break
						}
	
						getkey key_ctrl,17
						getkey key_r,82
						if(key_ctrl==1 && key_r==1){
							gsel 2,-1
							mouse_event $4,0,0
							mouse_event $10,0,0
							goto *init
						}
						
						await WAIT_TIME
					loop
				}
				//ドラッグの場合
				if(is_right_drag=1){
					echoRightDrag current_x,current_y
					repeat 
						mouse current_x,current_y
						getkey mouse_right,2
						if(mouse_right=1){
							mouse_right_pushed=1
							break
						}
	
						getkey key_ctrl,17
						getkey key_r,82
						if(key_ctrl==1 && key_r==1){
							gsel 2,-1
							mouse_event $4,0,0
							mouse_event $10,0,0
							goto *init
						}
						
						await WAIT_TIME
					loop
				}
				//ダブルクリックの場合
				if(is_double_right_click>0){
					echoRightDoubleClick current_x,current_y
					repeat
						mouse current_x,current_y
					    getkey mouse_right,2
					    if(mouse_right=0 && mouse_right_pushed=1){
							mouse_right_pushed=0
						}
					 	if(double_click_judge_time=0){
						 	if(mouse_right=1 && mouse_right_pushed=0){
								mouse_right_pushed=1
								double_click_judge_time=DOUBLE_CLICK_TIME
							}
						}
						if(double_click_judge_time>0){
							double_click_judge_time-=WAIT_TIME
							if(mouse_right=1 && mouse_right_pushed=0){
								mouse_right_pushed=1
								double_click_judge_time=0
								color 0,0,255:circle current_x-2,current_y-2,current_x+2,current_y+2
								break
							}
						}
	
						getkey key_ctrl,17
						getkey key_r,82
						if(key_ctrl==1 && key_r==1){
							gsel 2,-1
							mouse_event $4,0,0
							mouse_event $10,0,0
							goto *init
						}
						
					    await WAIT_TIME
					loop
					position+=is_double_right_click
				}
			swbreak
	
			case "R_UP"
			mouse current_x,current_y
			mouse_event $10,0,0
			mouse_right_pushed=0
			swbreak
	
			default
			swbreak
			
		swend
	
		/********** この部分改良 **********/
		//押しているキーが違ったら打つ　複数入力に対応させる
		if(prev_key!=current_key){
			if(current_key>2){
				keybd_event current_key
				keybd_event current_key,,2
			}
			prev_key=current_key
		}
		/********** この部分改良 **********/
	
		position++
		if(position>length(record)){
			break
		}
		await WAIT_TIME
	loop
	
	gsel 2,-1
	BlockInput 0
	mouse_event $4,0,0
	mouse_event $10,0,0
	goto *init
	
	stop
	
*finish 
	end
	
#deffunc drawRedCircle int _x, int _y
	gsel 0,2
	cls 4
	color 255,0,0
	circle _x-CIRCLE_RADIUS,_y-CIRCLE_RADIUS,_x+CIRCLE_RADIUS,_y+CIRCLE_RADIUS,0
	circle _x-(CIRCLE_RADIUS+1),_y-(CIRCLE_RADIUS+1),_x+(CIRCLE_RADIUS+1),_y+(CIRCLE_RADIUS+1),0
	circle _x-(CIRCLE_RADIUS+2),_y-(CIRCLE_RADIUS+2),_x+(CIRCLE_RADIUS+2),_y+(CIRCLE_RADIUS+2),0
	return

#deffunc drawBlueCircle int _x, int _y
	gsel 0,2
	cls 4
	color 0,0,255
	circle _x-CIRCLE_RADIUS,_y-CIRCLE_RADIUS,_x+CIRCLE_RADIUS,_y+CIRCLE_RADIUS,0
	circle _x-(CIRCLE_RADIUS+1),_y-(CIRCLE_RADIUS+1),_x+(CIRCLE_RADIUS+1),_y+(CIRCLE_RADIUS+1),0
	circle _x-(CIRCLE_RADIUS+2),_y-(CIRCLE_RADIUS+2),_x+(CIRCLE_RADIUS+2),_y+(CIRCLE_RADIUS+2),0
	return

#deffunc echoLeftClick int _x, int _y
	gsel 0,2
	pos _x+30,_y+30
	font "メイリオ",FONT_SIZE,1
	mes "左クリック"
	return

#deffunc echoLeftDrag int _x, int _y
	gsel 0,2
	pos _x+30,_y+30
	font "メイリオ",FONT_SIZE,1
	mes "左ドラッグ"
	return
	
#deffunc echoLeftDoubleClick int _x, int _y
	gsel 0,2
	pos _x+30,_y+30
	font "メイリオ",FONT_SIZE,1
	mes "左ダブルクリック"
	return
	
#deffunc echoRightClick int _x, int _y
	gsel 0,2
	pos _x+30,_y+30
	font "メイリオ",FONT_SIZE,1
	mes "右クリック"
	return

#deffunc echoRightDrag int _x, int _y
	gsel 0,2
	pos _x+30,_y+30
	font "メイリオ",FONT_SIZE,1
	mes "右ドラッグ"
	return
	
#deffunc echoRightDoubleClick int _x, int _y
	gsel 0,2
	pos _x+30,_y+30
	font "メイリオ",FONT_SIZE,1
	mes "右ダブルクリック"
	return
	
#deffunc drawTransparentCircle int _x, int _y
	gsel 2,2
	cls 0
	color 0,0,0
	circle current_x-CIRCLE_RADIUS,current_y-CIRCLE_RADIUS,current_x+CIRCLE_RADIUS,current_y+CIRCLE_RADIUS
	return
	
#defcfunc getMsg var _record
	first=instr(_record,0,"<Msg>")+strlen("<Msg>")
	last=instr(_record,0,"</Msg>")
	return strmid(_record,first,last-first)
	
#defcfunc getX var _record
	first=instr(_record,0,"<X>")+strlen("<X>")
	last=instr(_record,0,"</X>")
	return int(strmid(_record,first,last-first))
	
#defcfunc getY var _record
	first=instr(_record,0,"<Y>")+strlen("<Y>")
	last=instr(_record,0,"</Y>")
	return int(strmid(_record,first,last-first))

#defcfunc getCurrentKey var _record
	first=instr(_record,0,"<Key>")+strlen("<Key>")
	last=instr(_record,0,"</Key>")
	return int(strmid(_record,first,last-first))
	
#deffunc drawRedLine int _x, int _y, int _prev_x, int _prev_y
	gsel 0,2
	color 255,0,0
	line _x,_y,_prev_x,_prev_y
	line _x-1,_y,_prev_x-1,_prev_y
	line _x+1,_y,_prev_x+1,_prev_y
	line _x-1,_y,_prev_x+1,_prev_y
	line _x+1,_y,_prev_x-1,_prev_y
	line _x,_y-1,_prev_x,_prev_y-1
	line _x,_y+1,_prev_x,_prev_y+1
	line _x,_y-1,_prev_x,_prev_y+1
	line _x,_y+1,_prev_x,_prev_y-1
	return
	
#deffunc drawBlueLine int _x, int _y, int _prev_x, int _prev_y
	gsel 0,2
	color 0,0,255
	line _x,_y,_prev_x,_prev_y
	line _x-1,_y,_prev_x-1,_prev_y
	line _x+1,_y,_prev_x+1,_prev_y
	line _x-1,_y,_prev_x+1,_prev_y
	line _x+1,_y,_prev_x-1,_prev_y
	line _x,_y-1,_prev_x,_prev_y-1
	line _x,_y+1,_prev_x,_prev_y+1
	line _x,_y-1,_prev_x,_prev_y+1
	line _x,_y+1,_prev_x,_prev_y-1
	return
	
#deffunc initXYTable 
	comput "\n"
	await 1000
	comput "G30\n"
	await 5000
	return

#deffunc moveXYTable int _x, int _y, int _f
	comput "G01X"+str(XYTABLE_HEIGHT/2+_y)+"Y"+str(XYTABLE_WIDTH-_x)+"F"+str(_f)+"\n"
	return
